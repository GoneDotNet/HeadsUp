using System.ClientModel;
using Azure.AI.OpenAI;
using Microsoft.Extensions.AI;

namespace GoneDotNet.HeadsUp;


public static class MauiProgram
{
    public static MauiApp CreateMauiApp()
    {
        var builder = MauiApp
            .CreateBuilder()
            .UseMauiApp<App>()
            .UseMauiCommunityToolkit()
            .UseMauiCommunityToolkitMediaElement()
            .UseShinyShell(x => x.AddGeneratedMaps())
            .ConfigureFonts(fonts =>
            {
                fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
            });
        
#if DEBUG
        builder.Logging.SetMinimumLevel(LogLevel.Trace);
        builder.Logging.AddDebug();
#endif
        var client = new AzureOpenAIClient(
            new Uri(Constants.AzureOpenAiEndpoint),
            new ApiKeyCredential(Constants.AzureOpenAiApiKey)
        );
        var chatClient = client.GetChatClient(Constants.AzureOpenAiModel).AsIChatClient();
        builder.Services.AddChatClient(chatClient).UseFunctionInvocation().UseLogging();

        builder.Services.AddSingleton(FileSystem.Current);
        
        // this is source generated by Shiny.Extensions.DependencyInjection - simply add [Singleton], [Scoped], or [Transient] to your classes
        builder.Services.AddGeneratedServices();
        var app = builder.Build();
        return app;
    }
}